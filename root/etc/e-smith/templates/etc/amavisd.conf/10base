{
     # Warning! This template expands to PERL code. Code outside unquoted curly braces
     # is the template output, and as such is not executed by the expand-template command

     use Data::Dumper;
     use NethServer::MailServer;
     use esmith::util;
     $Data::Dumper::Terse = 1;
     $Data::Dumper::Indent = 0;
     '';
}

use strict;

# Anti-virus, anti-spam bypass:
{ $amavisd{VirusCheckStatus} eq 'enabled' ? '# ' : ''}@bypass_virus_checks_maps = (1);  # controls running of anti-virus code
{ $amavisd{SpamCheckStatus} eq 'enabled' ? '# ' : ''}@bypass_spam_checks_maps  = (1);  # controls running of anti-spam code

# COMMONLY ADJUSTED SETTINGS:
# $bypass_decode_parts = 1;         # controls running of decoders&dearchivers

$max_servers = { $amavisd{MaxProcesses} < 2 ? $amavisd{MaxProcesses} : 2 };            # num of pre-forked children (2..30 is common), -m
$daemon_user  = "amavis";     # (no default;  customary: vscan or amavis), -u
$daemon_group = "amavis";     # (no default;  customary: vscan or amavis), -g

# $MYHOME = '/var/amavis';   # a convenient default for other settings, -H
$TEMPBASE = "$MYHOME/tmp";   # working directory, needs to exist, -T
$ENV\{TMPDIR\} = $TEMPBASE;    # environment variable TMPDIR, used by SA, etc.
$QUARANTINEDIR = "/var/virusmails";

$db_home   = "$MYHOME/db";      # dir for bdb nanny/cache/snmp databases, -D

$log_level = 0;              # verbosity 0..5, -d
$log_recip_templ = undef;    # disable by-recipient level-0 log entries
$DO_SYSLOG = 1;              # log via syslogd (preferred)
$syslog_facility = 'mail';   # Syslog facility as a string
           # e.g.: mail, daemon, user, local0, ... local7
$syslog_priority = 'debug';  # Syslog base (minimal) priority as a string,
           # choose from: emerg, alert, crit, err, warning, notice, info, debug

$enable_db = 1;              # enable use of BerkeleyDB/libdb (SNMP and nanny)
$enable_global_cache = 1;    # enable use of libdb-based cache if $enable_db=1
$nanny_details_level = 2;    # nanny verbosity: 1: traditional, 2: detailed

@local_domains_maps = ( {
   @domainList = NethServer::MailServer->new()->getDeliveryDomains();
   Dumper([@domainList]);
} );  # list of all local domains

$mydomain = {
   my $mydomain = $domainList[0] ? $domainList[0] : `hostname -d`;
   chomp($mydomain);
   Dumper($mydomain);
};

@mynetworks_maps = ( {

   use esmith::NetworksDB;

   @networkList = map {
       (my $addr, $mask) = split('/', $_);
       esmith::util::computeLocalNetworkShortSpec($addr, $mask ? $mask : '255.255.255.255');
   } esmith::NetworksDB->open_ro()->local_access_spec();

   Dumper([@networkList]);

} );

$inet_socket_port = 10024;   # listen on this local TCP port(s)

$policy_bank\{'MYNETS'\} = \{   # mail originating from @mynetworks
  originating => 1,  # is true in MYNETS by default, but let's make it explicit
  os_fingerprint_method => undef,  # don't query p0f for internal clients
\};

$enable_dkim_verification = 0;

$sa_tag_level_deflt  = { $amavisd{SpamTagLevel} ? $amavisd{SpamTagLevel} : 2.0 };  # add spam info headers if at, or above that level
$sa_tag2_level_deflt = { $amavisd{SpamTag2Level} ? $amavisd{SpamTag2Level} : 6.2 };  # add 'spam detected' headers at that level
$sa_kill_level_deflt = { $amavisd{SpamKillLevel} ? $amavisd{SpamKillLevel} : 6.9 };  # triggers spam evasive actions (e.g. blocks mail)
$sa_dsn_cutoff_level = 10;   # spam level beyond which a DSN is not sent
$sa_crediblefrom_dsn_cutoff_level = 18; # likewise, but for a likely valid From
# $sa_quarantine_cutoff_level = 25; # spam level beyond which quarantine is off
$penpals_bonus_score = 8;    # (no effect without a @storage_sql_dsn database)
$penpals_threshold_high = $sa_kill_level_deflt;  # don't waste time on hi spam
$bounce_killer_score = 100;  # spam score points to add for joe-jobbed bounces

$sa_mail_body_size_limit = 400*1024; # don't waste time on SA if mail is larger
$sa_local_tests_only = 0;    # only tests which do not require internet access?

@virus_admin_maps = ( {
    %virus_admin_maps = map { $_ => 'virusalert@' . $_ } @domainList;
    Dumper(\%virus_admin_maps);
} );

@newvirus_admin_maps = @virus_admin_maps;
@spam_admin_maps = @virus_admin_maps;

@addr_extension_virus_maps      = ('virus');
@addr_extension_banned_maps     = ('banned');
@addr_extension_spam_maps       = ('spam');
@addr_extension_bad_header_maps = ('badh');

$recipient_delimiter = '+';  

$path = '/usr/local/sbin:/usr/local/bin:/usr/sbin:/sbin:/usr/bin:/bin';
# $dspam = 'dspam';

$MAXLEVELS = 14;
$MAXFILES = 1500;
$MIN_EXPANSION_QUOTA =      100*1024;  # bytes  (default undef, not enforced)
$MAX_EXPANSION_QUOTA = 300*1024*1024;  # bytes  (default undef, not enforced)

$sa_spam_subject_tag = { 
    $OUT = "'***SPAM*** ';"; 
}

$defang_virus  = 1;  # MIME-wrap passed infected mail
$defang_banned = 1;  # MIME-wrap passed mail containing banned name
# for defanging bad headers only turn on certain minor contents categories:
$defang_by_ccat\{+CC_BADH.",3"\} = 1;  # NUL or CR character in header
$defang_by_ccat\{+CC_BADH.",5"\} = 1;  # header line longer than 998 characters
$defang_by_ccat\{+CC_BADH.",6"\} = 1;  # header field syntax error


@av_scanners = (
  ['ClamAV-clamd',                   
    \&ask_daemon, ["CONTSCAN \{\}\n", "/var/run/clamav/clamd.sock"],
    qr/\bOK$/, qr/\bFOUND$/,
    qr/^.*?: (?!Infected Archive)(.*) FOUND$/m ]
);


1;  # insure a defined return value
