#!/usr/bin/perl

#
# nethserver-mail-filter-conf 
#
# Copyright (C) 2012 Nethesis srl
#

use NethServer::Service;
use File::Path;
use esmith::ConfigDB;
use User::pwent;
use strict;


#
# Announce clamd dependency
#

my @services = ('clamd');

NethServer::Service::manage_add('nethserver-mail-filter', @services);

#
# Adjust postfix smtpd connections limit, if it has not already done
#

my $configDb = esmith::ConfigDB->open() || die('Could not open Config DB');

my $connectionsLimit = $configDb->get_prop('postfix', 'ConnectionsLimit');
my $autoConfig = $configDb->get_prop('amavisd', 'AutoConfigStatus');

if(defined $autoConfig && $autoConfig ne 'enabled') {
    # Manual configuration: quit here.
    exit 0;
}

my $contentInspectionType = $configDb->get_prop('amavisd', 'ContentInspectionType');

# Enable anti-spam and anti-virus checking:
$configDb->set_prop('amavisd', 'VirusCheckStatus', 'enabled');
$configDb->set_prop('amavisd', 'SpamCheckStatus', 'enabled');

if($contentInspectionType ne 'before-queue') {
    # Switch to postfix BEFORE-QUEUE content filtering:
    $configDb->set_prop('amavisd', 'ContentInspectionType', 'before-queue');
    $configDb->set_prop('postfix', 'ConnectionsLimit', 20);
    $configDb->set_prop('postfix', 'ConnectionsLimitPerIp', 10);
}

# Refs #1516 -- setup bayes DB path for amavis user
sub configureBayesDb {
    
    my $bayesPath = '/var/lib/nethserver/sa';

    my $amavisUser = getpwnam('amavis');
    if ( ! $amavisUser ) {
	warn "User amavis not found";  
	return 0;
    } 

    # Amavis user's home directory must be non-empty non-root and must exist:
    if ( ! ($amavisUser->dir && $amavisUser->dir ne '/' && -d $amavisUser->dir) ) {
	warn "Could not find amavis home directory, or invalid path: `" . $amavisUser->dir . "`\n";
	return 0;
    }

    my $amavisSaPath = $amavisUser->dir . '/.spamassassin';

    # create ~/.spamassassin 
    if ( ! -d $amavisSaPath ) {
	my $amavisSaPathCreated = File::Path::make_path($amavisSaPath, { user => 'amavis', group => 'amavis', mode => 0770} );
	if ( ! $amavisSaPathCreated ) {
	    warn "Could not create and setup directory `$amavisSaPath`\n";
	    return 0;
	}
    }

    # create amavis user_prefs.cf
    if ( ! -e $amavisSaPath . '/user_prefs.cf') {
	open(my $fh, ">", $amavisSaPath . '/user_prefs.cf');
	if( ! $fh) {
	    warn $!; 
	    return 0;
	}
	print $fh <<PREFS_EOF;
# This file has been generated by $0
bayes_path $bayesPath/bayes
bayes_file_mode 770

PREFS_EOF
        close $fh;
    }

    # create directory for bayes DB:
    if ( ! -d $bayesPath ) {
	my $bayesPathCreated = File::Path::make_path($bayesPath, { group => 'amavis' }) 
	    && chmod 02770, $bayesPath;
	
	if ( ! $bayesPathCreated ) {
	    warn;
	    return 0;
	}
    }

    return 1;
}

configureBayesDb() or exit 1;

